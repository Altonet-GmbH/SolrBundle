{"name":"Solrbundle","tagline":"Solr-Integration into Symfony2 and Doctrine2","body":"\r\n[![Build Status](https://secure.travis-ci.org/floriansemm/SolrBundle.png?branch=master)](http://travis-ci.org/floriansemm/SolrBundle) [![Stories in Ready](http://badge.waffle.io/floriansemm/solrbundle.png)](http://waffle.io/floriansemm/solrbundle)\r\n\r\nThis Bundle provides a simple API to index and query a Solr Index. \r\n\r\n# Configuration\r\n\r\nThe bundle requires a working doctrine-orm or doctrine-mongodb configuration. There are no differences in the use.\r\n\r\n## Install the Bundle\r\n\r\nBundle\r\n\r\n1.  Register bundle in AppKernel.php\r\n\r\n        # app/AppKernel.php\r\n\r\n        $bundles = array(\r\n            // ...\r\n            new FS\\SolrBundle\\FSSolrBundle(),\r\n            // ...\r\n        );\r\n\r\n2.  Add Bundle to autoload\r\n\r\n\tA. Via composer, add in your composer.json\r\n\r\n        \"require\": {\r\n            // ...  \r\n            \"floriansemm/solr-bundle\": \"dev-master\"\r\n        }\r\n        \r\n\tB.  or manually, in app/autoload.php\r\n\t\r\n\ti. In symfony 2.1.4 (supposing you clone the bundle in vendor/floriansemm/solr-bundle/FS/, making available vendor/floriansemm/solr-bundle/FS/SolrBundle/FSSolrBundle.php)\r\n\r\n        $loader->add('FS\\\\SolrBundle', array(__DIR__.'/../vendor/floriansemm/solr-bundle'));\t\t\r\n\r\n\tii. in older version it could be\r\n\r\n        $loader->registerNamespaces(array(\r\n            // ...\r\n            'FS' => __DIR__.'/../vendor/bundles',\r\n            // ...\r\n        ));\r\n\r\n## Multiple Indexes\r\n\r\nYou have to setup the connection options\r\n\r\n    # app/config/config.yml\r\n    fs_solr:\r\n      endpoints:\r\n        default:\r\n          host: host\r\n          port: 8983\r\n          path: /solr/\r\n          core: corename\r\n          timeout: 5\r\n          \r\nWith this config you have access to the service `solr.client.default`. If you have more client you can access them with the call `solr.client.clientname`\r\n\r\n# Usage #\r\n\r\n## Annotations\r\n\r\nTo put an entity to the index, you must add some annotations to your entity:\r\n\r\n\t// your Entity\r\n\r\n\t// ....\r\n\tuse FS\\SolrBundle\\Doctrine\\Annotation as Solr;\r\n\t\r\n\t/**\r\n\t * @Solr\\Document(repository=\"Full\\Qualified\\Class\\Name\")\r\n\t * @ORM\\Table()\r\n\t */\r\n\tclass Post\r\n\t{\r\n\t\t/**\r\n\t\t * @Solr\\Id\r\n\t\t *\r\n\t\t * @ORM\\Column(name=\"id\", type=\"integer\")\r\n\t\t * @ORM\\Id\r\n\t\t * @ORM\\GeneratedValue(strategy=\"AUTO\")\r\n\t\t */\r\n\r\n\t\tprivate $id;\r\n\t\t/**\r\n\t\t *\r\n\t\t * @Solr\\Field(type=\"string\")\r\n\t\t *\r\n\t\t * @ORM\\Column(name=\"title\", type=\"string\", length=255)\r\n\t\t */\r\n\t\tprivate $title = '';\r\n\r\n\t\t/**\r\n\t\t* \r\n\t\t* @Solr\\Field(type=\"string\")\r\n\t\t*\r\n\t\t* @ORM\\Column(name=\"text\", type=\"text\")\r\n\t\t*/\r\n\t\tprivate $text = '';\r\n\r\n\t\t/**\r\n\t\t* @Solr\\Field(type=\"date\")\r\n\t\t*\r\n\t\t* @ORM\\Column(name=\"created_at\", type=\"datetime\")\r\n\t\t*/\r\n\t\tprivate $created_at = null;\r\n\t}\r\n\r\n### Supported field types\r\n\r\nCurrently is a basic set of types implemented.\r\n\r\n- string\r\n- text\r\n- date\r\n- integer\r\n- float\r\n- double\r\n- long\r\n- boolean\r\n\r\nIt is possible to use custum field types (schema.xml).\r\n\r\n### Filter annotation\r\n\r\nIn some cases a entity should not be index. For this you have the `SynchronizationFilter` Annotation.\r\n\r\n\r\n\t/**\r\n\t* @Solr\\Document\r\n\t* @Solr\\SynchronizationFilter(callback=\"shouldBeIndex\")\r\n\t*/\r\n\tclass SomeEntity\r\n\t{\r\n\t\t/**\r\n\t\t* @return boolean\r\n\t\t*/\r\n\t\tpublic function shouldBeIndex()\r\n\t\t{\r\n\t\t\t// put your logic here\r\n\t\t}\r\n\t}\r\n\r\nThe callback property specifies an callable function, which decides whether the should index or not. \t\r\n\r\n### Specify cores\r\n\r\nIt is possible to specify a core dedicated to a document\r\n\r\n       /**\r\n    \t* @Solr\\Document(index=\"core0\")\r\n    \t*/\r\n    \tclass SomeEntity\r\n    \t{\r\n    \t    // ...\r\n    \t}\r\n\r\nAll documents will be indexed in the core `core0`. If your entities/document have different languages then you can setup\r\na callback method, which returns the preferred core for the entity.\r\n\r\n       /**\r\n    \t* @Solr\\Document(indexHandler=\"indexHandler\")\r\n    \t*/\r\n    \tclass SomeEntity\r\n    \t{\r\n    \t    public function indexHandler()\r\n    \t    {\r\n    \t        if ($this->language == 'en') {\r\n    \t            return 'core0';\r\n    \t        }\r\n    \t    }\r\n    \t}\r\n\r\nEach core must setup up in the config.yml under `endpoints`. If you leave the `index` or `indexHandler` property empty,\r\nthen a default core will be used (first in the `endpoints` list). To index a document in all cores use `*` as index value:\r\n\r\n        @Solr\\Document(index=\"*\")\r\n\r\n## Solr field configuration\r\n\r\nSolr comes with a set of predefined field-name/field-types mapping:\r\n\r\n- title (solr-type: general_text)\r\n- text (solr-type: general_text)\r\n- category (solr-type: general_text)\r\n- content_type (solr-type: string)\r\n\r\nFor details have a look into your schema.xml.\r\n\r\nSo if you have an entity with a property \"category\", then you don't need a type-declaration in the annotation:\r\n\r\n    /**\r\n    * @Solr\\Field\r\n    * @ORM\\Column(name=\"category\", type=\"text\")\r\n    */\r\n    private $category = '';\r\n\r\nThe field has in this case automaticaly the type \"general_text\".\r\n\r\nIf you persist this entity, it will put automaticlly to the index. Update and delete happens automatically too.\r\n\r\n## Query a field of a document\r\n\r\nTo query the index you have to call some services.\r\n\r\n    $query = $this->get('solr')->createQuery('AcmeDemoBundle:Post');\r\n    $query->addSearchTerm('title', 'my title');\r\n\r\n    $result = $result = $query->getResult();\r\n\t\t\r\nThe $result array contains all found entities. The solr-service does all mappings from SolrDocument\r\nto your entity for you.\r\n\r\n## Query all fields of a document\r\n\r\nThe pervious examples have queried only the field 'title'. You can also query all fields with a string.\r\n\r\n    $query = $this->get('solr')->createQuery('AcmeDemoBundle:Post');\r\n    $query->queryAllFields('my title');\r\n\r\n    $result = $query->getResult();\r\n\r\n\r\n## Define Result-Mapping\r\n\r\nTo narrow the mapping, you can use the `addField()` method.\r\n\r\n    $query = $this->get('solr')->createQuery('AcmeDemoBundle:Post');\r\n    $query->addSearchTerm('title', 'my title');\r\n    $query->addField('id');\r\n    $query->addField('text');\r\n\r\n    $result = $query->getResult();\r\n\r\nIn this case only the fields id and text will be mapped (addField()), so title and created_at will be\r\nempty. If nothing was found $result is empty.\r\n\r\n## Configure HydrationModes\r\n\r\nHydrationMode tells the Bundle how to create an entity from a document.\r\n\r\n1. `FS\\SolrBundle\\Doctrine\\Hydration\\HydrationModes::HYDRATE_INDEX` - use only the data from solr\r\n2. `FS\\SolrBundle\\Doctrine\\Hydration\\HydrationModes::HYDRATE_DOCTRINE` - merge the data from solr with the entire doctrine-entity\r\n\r\nWith a custom query:\r\n\r\n    $query = $this->get('solr')->createQuery('AcmeDemoBundle:Post');\r\n    $query->setHydrationMode($mode)\r\n\r\nWith a custom document-repository you have to set the property `$hydrationMode` itself:\r\n\r\n    public function find($id)\r\n    {\r\n        $this->hydrationMode = HydrationModes::HYDRATE_INDEX;\r\n\r\n        return parent::find($id);\r\n    }\r\n\r\n## Index manually an entity\r\n\r\nTo index your entities manually, you can do it the following way:\r\n\r\n    $this->get('solr')->addDocument($entity);\r\n    $this->get('solr')->updateDocument($entity);\r\n    $this->get('solr')->deleteDocument($entity);\r\n\r\n`deleteDocument()` requires that the entity-id is set.\r\n\r\n## Use document repositories\r\n\r\nIf you specify your own repository you must extend the `FS\\SolrBundle\\Repository\\Repository` class. The useage is the same\r\nlike Doctrine-Repositories:\r\n\r\n\t$myRepository = $this->get('solr')->getRepository('AcmeDemoBundle:Post');\r\n\t$result = $myRepository->mySpecialFindMethod();\r\n\t\r\nIf you haven't declared a concrete repository in your entity and you calling `$this->get('solr')->getRepository('AcmeDemoBundle:Post')`, you will\r\nget an instance of `FS\\SolrBundle\\Repository\\Repository`.\r\n\r\n## Commands\r\n\r\nThere are comming two commands with this bundle:\r\n\r\n* `solr:index:clear` - delete all documents in the index\r\n* `solr:synchronize` - synchronize the db with the index\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}